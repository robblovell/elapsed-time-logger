{"version":3,"file":"elapsed-time-logger.js","sources":["../src/index.ts"],"sourcesContent":["import hrtime from 'browser-hrtime';\ninterface IElapsedLogger {\n  end(label?: string): void;\n  get(): string;\n  _diff(): HrTime;\n  parse(hrtime: HrTime): string;\n}\ntype HrTime = [number, number];\nclass ElapsedLogger implements IElapsedLogger {\n  private _timer: HrTime;\n  constructor() {\n    this._timer = hrtime();\n  }\n\n  end(label: string = '') {\n    const elapsedTime = this.get();\n    console.log(`${label ? label + ' ' : ''}${elapsedTime}`);\n  }\n\n  _diff(): HrTime {\n    return hrtime(this._timer);\n  }\n\n  get(): string {\n    const diff = this._diff();\n    return this.parse(diff);\n  }\n\n  parse(hrtime: HrTime): string {\n    let result = '';\n    const sourceMS: number = (hrtime[0] * 1e9 + hrtime[1]) / 1e6;\n    const ms: number = Math.round(sourceMS % 1000);\n    const sec: number = Math.round((((sourceMS / 1000) % 60) + Number.EPSILON) * 100) / 100;\n    const mins: number = Math.floor((sourceMS / (1000 * 60)) % 60);\n    const hrs: number = Math.floor((sourceMS / (1000 * 60 * 60)) % 24);\n\n    if (hrs > 0) {\n      result += hrs + ' hours ';\n    }\n    if (mins > 0) {\n      result += mins + ' minutes ';\n    }\n    if (sec >= 1) {\n      result += sec + ' seconds ';\n    }\n    if (mins === 0 && hrs === 0 && sec < 1 && ms > 0) {\n      result += ms + 'ms';\n    }\n\n    return result;\n  }\n}\n\nconst _timers = new Map<string, IElapsedLogger>();\n\nconst start = (label: string | null = null): IElapsedLogger => {\n  const elapsed = new ElapsedLogger();\n  if (!label) {\n    return elapsed;\n  }\n  _timers.set(label, elapsed);\n  return elapsed;\n};\n\nconst end = (label: string, overrideLabel: string | null = null): void => {\n  const elapsedTime = get(label);\n  if (elapsedTime === false) {\n    return;\n  }\n  console.log(`${overrideLabel || label} ${elapsedTime}`);\n  _timers.delete(label);\n};\n\nconst get = (label: string): string | boolean => {\n  const timer = _timers.get(label);\n  if (!timer) {\n    console.warn(`No such label '${label}' for ElapsedLogger`); //process.emitWarning\n    return false;\n  }\n  return timer.get();\n};\nexport default {\n  get: get,\n  end: end,\n  start: start,\n};\n"],"names":["this","_timer","hrtime","ElapsedLogger","label","elapsedTime","get","console","log","diff","_diff","parse","result","sourceMS","ms","Math","round","sec","Number","EPSILON","mins","floor","hrs","_timers","Map","timer","warn","end","overrideLabel","delete","start","elapsed","set"],"mappings":"qTAQA,iBAEE,aACEA,KAAKC,OAASC,IAwClB,OArCEC,gBAAA,SAAIC,gBAAAA,MACF,IAAMC,EAAcL,KAAKM,MACzBC,QAAQC,KAAOJ,EAAQA,EAAQ,IAAM,IAAKC,IAG5CF,kBAAA,WACE,OAAOD,EAAOF,KAAKC,SAGrBE,gBAAA,WACE,IAAMM,EAAOT,KAAKU,QAClB,OAAOV,KAAKW,MAAMF,IAGpBN,kBAAA,SAAMD,GACJ,IAAIU,EAAS,GACPC,GAAgC,IAAZX,EAAO,GAAWA,EAAO,IAAM,IACnDY,EAAaC,KAAKC,MAAMH,EAAW,KACnCI,EAAcF,KAAKC,MAAoD,KAA3CH,EAAW,IAAQ,GAAMK,OAAOC,UAAkB,IAC9EC,EAAeL,KAAKM,MAAOR,MAA0B,IACrDS,EAAcP,KAAKM,MAAOR,OAA+B,IAe/D,OAbIS,EAAM,IACRV,GAAUU,EAAM,WAEdF,EAAO,IACTR,GAAUQ,EAAO,aAEfH,GAAO,IACTL,GAAUK,EAAM,aAEL,IAATG,GAAsB,IAARE,GAAaL,EAAM,GAAKH,EAAK,IAC7CF,GAAUE,EAAK,MAGVF,QAILW,EAAU,IAAIC,IAoBdlB,EAAM,SAACF,GACX,IAAMqB,EAAQF,EAAQjB,IAAIF,GAC1B,OAAKqB,EAIEA,EAAMnB,OAHXC,QAAQmB,KAAK,kBAAkBtB,0BACxB,UAII,CACbE,IAAKA,EACLqB,IAnBU,SAACvB,EAAewB,gBAAAA,QAC1B,IAAMvB,EAAcC,EAAIF,IACJ,IAAhBC,IAGJE,QAAQC,KAAOoB,GAAiBxB,OAASC,GACzCkB,EAAQM,OAAOzB,KAcf0B,MA7BY,SAAC1B,gBAAAA,QACb,IAAM2B,EAAU,IAAI5B,EACpB,OAAKC,GAGLmB,EAAQS,IAAI5B,EAAO2B,GACZA,GAHEA"}